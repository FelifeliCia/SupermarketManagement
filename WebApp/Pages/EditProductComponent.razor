@page "/editproduct/{productId}"
@attribute [Authorize(Policy ="AdminOnly")]

@inject NavigationManager NavigationManager
@inject IEditProductUseCase EditProductUseCase
@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
<h3>添加产品</h3>
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">名称</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control">@product.Name</InputText>
        </div>
        <div class="form-group">
            <label for="category">类别</label>
            <select id="category" @bind="product.CategoryId" class="form-select">
                <option value="0"></option>
                @foreach (var item in categories)
                {
                    if (product.CategoryId.HasValue && item.CategoryID == product.CategoryId)
                    {
                        <option value="@item.CategoryID" selected>@item.Name</option>
                    }
                    else
                    {
                        <option value="@item.CategoryID">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="quantity">库存</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control">@product.Quantity</InputNumber>
        </div>
        <div class="form-group">
            <label for="price">价格</label>
            <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format="F2" class="form-control">@product.Price</InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">保存</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">取消</button>
    </EditForm>
}
@code {
    [Parameter]
    public string productId { get; set; }
    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(this.productId, out int productIdInt))
        {
            var productToUpdate = GetProductByIdUseCase.Execute(productIdInt);
            this.product = new Product
            {
                ProductId = productToUpdate.ProductId,
                Name = productToUpdate.Name,
                CategoryId = productToUpdate.CategoryId,
                Quantity = productToUpdate.Quantity,
                Price = productToUpdate.Price
            };
      }
        this.categories = ViewCategoriesUseCase.Execute();
    }

    private void OnValidSubmit()
    {
        EditProductUseCase.Execute(product);
        NavigationManager.NavigateTo("/viewproducts");
    }
    private void OnCancel()
    {
        NavigationManager.NavigateTo("/viewproducts");
    }
}

