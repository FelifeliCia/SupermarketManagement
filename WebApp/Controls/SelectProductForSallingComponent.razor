@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductByCategoryId ViewProductByCategoryId
<div class="form-group">
    <label for="category">类别</label>
    <select id="category" @bind="SelectedCategoryId" class="form-select">
        <option selected>请选择类别</option>
        @foreach (var item in categories)
        {
            <option value="@item.CategoryID">@item.Name</option>
        }
    </select>
</div>

<table class="table">
    <thead>
        <tr>
            <th>名称</th>
            <th>库存</th>
        </tr>
    </thead>
    <tbody>
        @if (productsInCategories != null)
        {
            @foreach (var item in productsInCategories)
            {
                <tr @onclick="@(()=>OnSelectProduct(item))"
            style="@(item.ProductId==selectedProductId?"background-color:beige;":"cursor:pointer;")">
                    <th>@item.Name</th>
                    <th>@item.Quantity</th>
                </tr>
            }
        }

    </tbody>
</table>

@code {
    [Parameter]
    public EventCallback<Product> OnProductsSelected { get; set; }
    private int selectedProductId;
    private IEnumerable<Category> categories;
    private IEnumerable<Product> productsInCategories;
    private int selectedCategoryId;
    public int SelectedCategoryId
    {
        get
        {
            return this.selectedCategoryId;
        }
        set
        {
            this.selectedCategoryId = value;
            this.productsInCategories = ViewProductByCategoryId.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.categories = ViewCategoriesUseCase.Execute();
    }
    private void OnSelectProduct(Product product)
    {
        OnProductsSelected.InvokeAsync(product);
        if (product != null) selectedProductId = product.ProductId;
    }
}
